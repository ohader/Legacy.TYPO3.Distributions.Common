<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This script belongs to the TYPO3 v4 build system.                      *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License as published by the *
 * Free Software Foundation, either version 3 of the License, or (at your *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser       *
 * General Public License for more details.                               *
 *                                                                        *
 * You should have received a copy of the GNU Lesser General Public       *
 * License along with the script.                                         *
 * If not, see http://www.gnu.org/licenses/lgpl.html                      *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
-->
<project name="TYPO3v4Common" basedir="." default="common">
	<property name="common.all" value="false" />
	<property name="common.baseDir" value="Common/" />
	<property name="common.taskPrefix" value="Common." />

	<taskdef name="typo3convertversion" classname="${common.taskPrefix}Tasks.Typo3ConvertVersionTask" />
	<taskdef name="typo3convertwhitespaces" classname="${common.taskPrefix}Tasks.Typo3ConvertWhitespacesTask" />
	<taskdef name="typo3gitinfo" classname="${common.taskPrefix}Tasks.Typo3GitInfoTask" />
	<taskdef name="typo3branchlist" classname="${common.taskPrefix}Tasks.Typo3BranchListTask" />
	<taskdef name="typo3filehash" classname="${common.taskPrefix}Tasks.Typo3FileHashTask" />
	<taskdef name="typo3applist" classname="${common.taskPrefix}Tasks.Typo3AppListTask" />
	<taskdef name="typo3gitchangelog" classname="${common.taskPrefix}Tasks.Typo3GitChangelogTask" />

	<property name="git.remoteRepository" value="git://git.typo3.org/TYPO3v4/Core.git" />
	<property name="git.commitHookCommand" value="scp -p -P 29418 review.typo3.org:hooks/commit-msg .git/hooks/" />
	<property name="git.submitApprovalCommand" value="ssh -p 29418 review.typo3.org gerrit approve --verified=+2 --code-review=+2 --project TYPO3v4/Core --message 'Auto-approved' --submit" />
	<property name="git.pushUrl" value="ssh://review.typo3.org/TYPO3v4/Core.git" />
	<property name="git.pushTopic" value="/RELEASE" />
	<property name="git.author" value="TYPO3 v4 Release Team &lt;typo3v4@typo3.org&gt;" />

	<property name="project.targetsDirectory" value="${project.basedir}/Targets/" />
	<property name="project.workDirectory" value="${project.basedir}/Work/" />
	<property name="project.localRepositoryDirectory" value="${project.workDirectory}Core.git/" />
	<property name="project.resourcesDirectory" value="${project.basedir}/Resources/" />
	<property name="project.versionFile" value="t3lib/config_default.php" />

	<exec logoutput="false" checkreturn="true" command="git --exec-path" outputProperty="project.gitPath" />
	<property name="project.gitPath" value="${project.gitPath}/git" override="true" />

	<tstamp>
		<format property="common.date" pattern="%Y%m%d" />
	</tstamp>

	<target name="common">
		<input propertyName="common.type" defaultValue="snapshot"
			validArgs="snapshot,regular,alpha,beta,rc" message="Type of the release" />
		<input propertyName="common.major" defaultValue="4.6"
			validArgs="4.1,4.2,4.3,4.4,4.5,4.6" message="Major version of the release" />
		<input propertyName="common.publish" defaultValue="n"
			validArgs="y,n" message="Publish (Git repository, SourceForge)" />

		<phingcall target="repository-clone" />

		<typo3convertversion value="${common.major}" type="branch" property="common.branch" />

		<typo3gitinfo
			branch="${common.branch}"
			type="${common.type}"
			property="common.info"
			gitPath="${project.gitPath}"
			repository="${project.localRepositoryDirectory}" />

		<echo message="nextVersion: ${common.info.nextVersion}" />
		<echo message="nextTag: ${common.info.nextTag}" />
		<echo message="currentVersion: ${common.info.currentVersion}" />
		<echo message="currentTag: ${common.info.currentTag}" />
		<echo message="lastReference: ${common.info.lastReference}" />
		<echo message="branchName: ${common.info.branchName}" />
		<echo message="isOutdatedBranch: ${common.info.isOutdatedBranch}" />
		<echo message="successorVersion: ${common.info.successorVersion}" />
	</target>

	<target name="project-md5">
		<typo3filehash dir="${project.targetsDirectory}" returnProperty="project-md5.result" method="md5" />
		<echo message="${project-md5.result}" />
	</target>

	<target name="project-initialize">
		<delete dir="${project.targetsDirectory}" quiet="true" />
		<mkdir dir="${project.targetsDirectory}" />
	</target>

	<target name="project-permissions">
		<fail unless="project-permissions.directory" message="You must set the $project-permissions.directory for this target" />

		<!-- fix file permissions and make some files executable -->
		<!-- Change ownership -->
		<chown user="root:root" quiet="true" verbose="false">
			<fileset dir="${project-permissions.directory}" />
		</chown>

		<!-- Set readonly permissions for everyone except the owner -->
		<chmod mode="0755" quiet="true" verbose="false">
			<fileset dir="${project-permissions.directory}" />
		</chmod>

		<!-- files should not remain executable -->
		<exec command="find ${project-permissions.directory} -type f | xargs chmod a-x" />

		<!--  ... except those listed in EXEC_FILES -->
		<chmod mode="0755" quiet="true" verbose="false">
			<!-- Files that must be made executable -->
			<fileset dir="${project-permissions.directory}">
				<include name="**/*.phpcron" />
				<include name="**/*.phpsh" />
				<include name="**/*.sh" />
				<include name="**/*.pl" />
			</fileset>
		</chmod>
	</target>

	<target name="repository-export">
		<fail unless="repository-export.gitName" message="Property $repository-export.gitName is required." />
		<fail unless="repository-export.directory" message="Propery $repository-export.directory is required." />

		<delete dir="${repository-export.directory}" quiet="true" />
		<mkdir dir="${repository-export.directory}" />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-export.gitName}" />
		</phingcall>

		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git checkout-index -a --prefix=${repository-export.directory}" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule foreach 'git checkout-index -a --prefix=${repository-export.directory}$path/'" />

		<delete includeemptydirs="true">
			<fileset dir="${repository-export.directory}" defaultexcludes="false">
				<include name=".gitignore" />
				<include name=".gitmodules" />
				<include name="**/src" />
				<include name="**/src/**" />
				<include name="**/tests" />
				<include name="**/tests/**" />
				<include name=".svn" />
				<include name="**/.svn" />
				<include name="**/.svn/**" />
				<include name="CVS" />
				<include name="SVNreadme.txt" />
				<include name="*.webprj" />
				<include name="*.orig" />
				<include name="*~" />
			</fileset>
		</delete>
	</target>


	<target name="repository-clone">
		<available file="${project.localRepositoryDirectory}.git" type="dir" property="repository-clone.exists" />
		<if>
			<not><isset property="repository-clone.exists" /></not>
			<then>
				<delete dir="${project.localRepositoryDirectory}" quiet="true" />
				<mkdir dir="${project.localRepositoryDirectory}" />

				<exec logoutput="true" checkreturn="true"
					command="git clone --recursive ${git.remoteRepository} ${project.localRepositoryDirectory}" />

				<phingcall target="repository-initialize" />
			</then>
			<else>
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git reset --hard origin" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git clean -df" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git checkout master" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git clean -df" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git pull" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git fetch --tags" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git submodule --quiet update --init" />
				<!--
				<gitpull repository="${git.remoteRepository}" gitPath="${project.gitPath}" />
				-->
			</else>
		</if>
	</target>

	<target name="repository-initialize">
		<!-- Git configuration -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config remote.origin.pushurl '${git.pushUrl}'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config user.name 'TYPO3 v4 Release Team'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config user.email 'typo3v4@typo3.org'" />

		<!-- Commit Hooks -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="${git.commitHookCommand}" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule --quiet foreach '${git.commitHookCommand}'" />
		<!-- Git configuration for submodules -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule --quiet foreach 'git config url.&quot;ssh://review.typo3.org:29418&quot;.pushInsteadOf git://git.typo3.org'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule --quiet foreach 'git config user.name &quot;TYPO3 v4 Release Team&quot;'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule --quiet foreach 'git config user.email &quot;typo3v4@typo3.org&quot;'" />
	</target>


	<target name="repository-select">
		<fail unless="repository-select.branch" message="Property $repository-select.branch is required." />

		<gitcheckout
			gitPath="${project.gitPath}"
			repository="${project.localRepositoryDirectory}"
			branchname="${repository-select.branch}" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule update --init" />
	</target>

	<!-- this target does a "git tag" command for the main repository and its submodules -->
	<target name="repository-typo3-tag">
		<!-- only tag if the appropriate variables are set -->
		<fail unless="repository-typo3-tag.tag" message="Property $repository-typo3-tag.tag is required." />
		<fail unless="repository-typo3-tag.branch" message="Property $repository-typo3-tag.branch is required." />
		<fail unless="repository-typo3-tag.version" message="Property $repository-typo3-tag.version is required." />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-tag.branch}" />
		</phingcall>

		<!-- tagging the main project -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git tag -a -f -m 'Tagged version ${repository-typo3-tag.version}' ${repository-typo3-tag.tag}" />

		<!-- tagging each submodule was well -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git submodule foreach 'git tag -a -f -m &quot;Tagged version ${repository-typo3-tag.version}&quot; ${repository-typo3-tag.tag}'" />

		<!-- publish the tags to the remote repository, if the option was set -->
		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<!-- push tag for super project (Core) -->
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git push origin HEAD:refs/tags/${repository-typo3-tag.tag}" />
				<!-- push tags for submodules (workspaces, dbal, ...) -->
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git submodule foreach 'git push origin HEAD:refs/tags/${repository-typo3-tag.tag}'" />
			</then>
		</if>
	</target>

	<target name="repository-typo3-push">
		<fail unless="repository-typo3-push.branch" message="Property $repository-typo3-push is required" />

		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git push origin HEAD:refs/for/${repository-typo3-push.branch}${git.pushTopic}" />
				<phingcall target="repository-typo3-approve" />
			</then>
		</if>
	</target>

	<target name="repository-typo3-approve">
		<!-- also submit the patch through gerrit after the push -->
		<exec logoutput="false" checkreturn="false"
			dir="${project.localRepositoryDirectory}"
			outputProperty="repository-typo3-approve.commitHash"
			command="git log -1 --pretty=format:%H" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="${git.submitApprovalCommand} ${repository-typo3-approve.commitHash}" />
	</target>

	<target name="repository-typo3-version">
		<fail unless="repository-typo3-version.set" message="Property $repository-typo3-version.set is required." />
		<fail unless="repository-typo3-version.branch" message="Property $repository-typo3-version.branch is required." />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-version.branch}" />
		</phingcall>

		<phingcall target="typo3-version">
			<property name="typo3-version.set" value="${repository-typo3-version.set}" />
			<property name="typo3-version.directory" value="${project.localRepositoryDirectory}" />
		</phingcall>
	</target>

	<target name="repository-typo3-changelog">
		<fail unless="repository-typo3-changelog.file" message="Property $repository-typo3-changelog.file is required" />
		<fail unless="repository-typo3-changelog.branch" message="Property $repository-typo3-changelog is required" />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-changelog.branch}" />
		</phingcall>

		<exec logoutput="false" checkreturn="false"
			dir="${project.localRepositoryDirectory}"
			outputProperty="repository-typo3-changelog.raw"
			command="git log refs/tags/${common.info.lastReference}..HEAD --submodule --pretty=format:hash:%h%x09date:%cd%x09subject:%s%x09author:%an%x09body:%b--%x09COMMIT --date=short" />
		<typo3gitchangelog file="${repository-typo3-changelog.file}" property="repository-typo3-changelog.raw"
			format="{{date}}  {{hash}}  {{body.resolves,8}}  {{subject}} ({{author}})"
			fieldDelimiter="&#09;" commitDelimiter="--&#09;COMMIT" />
	</target>

	<target name="typo3-version">
		<fail unless="typo3-version.set" message="Property $repository-typo3-version.set is required." />
		<fail unless="typo3-version.directory" message="Property $repository-typo3-version.directory is required" />

		<property name="typo3-version.filePath" value="${typo3-version.directory}${project.versionFile}" />

		<move file="${typo3-version.filePath}" tofile="${typo3-version.filePath}.modified">
			<filterchain>
				<replaceregexp>
					<regexp pattern="(\$TYPO_VERSION = )\'[^\']+" replace="$1'${typo3-version.set}" />
				</replaceregexp>
			</filterchain>
		</move>
		<move file="${typo3-version.filePath}.modified" tofile="${typo3-version.filePath}" />
	</target>

	<!--
		publishes the existing archives to sourceforge
		watch it: untested, and the folder structure is still unclear
	-->
	<target name="publish-sourceforge" description="Upload existing archives of the TYPO3 source to SourceForce">
		<fail unless="publish-sourceforge.directory" message="Property $publish-sourceforge.name is required." />

		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<property name="publish-sourceforge.fullPath" value="/home/frs/project/t/ty/typo3/TYPO3 Source and Dummy/${publish-sourceforge.directory}" />
				<typo3convertwhitespaces property="publish-sourceforge.fullPath" />
				<echo message="Publishing to ${publish-sourceforge.fullPath}" />

				<!-- the only way to create a folder via ssh, thanks FLOW3 -->
				<exec logoutput="true" checkreturn="true" command="ssh shell.sourceforge.net create" />
				<exec logoutput="true" checkreturn="true" command="ssh shell.sourceforge.net mkdir -p '${publish-sourceforge.fullPath}'" />
				<exec logoutput="true" checkreturn="true" command="ssh shell.sourceforge.net chmod 0775 '${publish-sourceforge.fullPath}'" />
				<exec logoutput="true" checkreturn="true" command="ssh shell.sourceforge.net shutdown" />
				<exec logoutput="true" checkreturn="true" command="scp ${project.targetsDirectory}* frs.sourceforge.net:'${publish-sourceforge.fullPath}/'" />
			</then>
		</if>
	</target>
</project>
