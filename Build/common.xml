<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This script belongs to the TYPO3 v4 build system.                      *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License as published by the *
 * Free Software Foundation, either version 3 of the License, or (at your *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser       *
 * General Public License for more details.                               *
 *                                                                        *
 * You should have received a copy of the GNU Lesser General Public       *
 * License along with the script.                                         *
 * If not, see http://www.gnu.org/licenses/lgpl.html                      *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
-->
<project name="TYPO3v4Common" basedir="." default="common">
	<property name="common.all" value="false" />
	<property name="common.skipClone" value="false" />

	<taskdef file="${common.basedir}/tasks.properties" classpath="${common.basedir}" />

	<property name="git.remoteRepository" value="git://git.typo3.org/Packages/TYPO3.CMS.git" />
	<property name="git.commitHookCommand" value="wget -q --no-check-certificate -O .git/hooks/commit-msg https://review.typo3.org/tools/hooks/commit-msg; chmod 0755 .git/hooks/commit-msg" />
	<property name="git.submitApprovalCommand" value="ssh -p 29418 review.typo3.org gerrit review --verified +2 --code-review +2 --project Packages/TYPO3.CMS --message 'Auto-approved' --submit" />
	<property name="git.pushUrl" value="ssh://review.typo3.org/Packages/TYPO3.CMS.git" />
	<property name="git.pushTopic" value="/RELEASE" />
	<property name="git.author" value="TYPO3 Release Team &lt;typo3cms@typo3.org&gt;" />
	<property name="git.signingkey" value="59BC94C4" />

	<property name="project.targetsDirectory" value="${build.basedir}/Targets/" />
	<property name="project.workDirectory" value="${build.basedir}/Work/" />
	<property name="project.localRepositoryDirectory" value="${project.workDirectory}TYPO3.CMS.git/" />
	<property name="project.localRepositoryMessage" value="${project.workDirectory}TYPO3.CMS.git/.git/COMMIT_EDITMSG" />

	<exec logoutput="false" checkreturn="true" command="git --exec-path" outputProperty="project.gitPath" />
	<property name="project.gitPath" value="${project.gitPath}/git" override="true" />

	<tstamp><format property="common.date" pattern="%Y%m%d" /></tstamp>
	<tstamp><format property="common.year" pattern="%Y" /></tstamp>

	<target name="common">
		<if>
			<not><isset property="common.type" /></not>
			<then>
				<input propertyName="common.type" defaultValue="snapshot"
					validArgs="snapshot,regular,alpha,beta,rc" message="Type of the release" />
			</then>
		</if>
		<if>
			<not><isset property="common.major" /></not>
			<then>
				<input propertyName="common.major" defaultValue="7.6"
					validArgs="4.5,6.2,7.6,8.0,8.1,8.2,8.3,8.4,8.5,8.6,8.7" message="Major version of the release" />
			</then>
		</if>
		<if>
			<not><isset property="common.publish" /></not>
			<then>
				<input propertyName="common.publish" defaultValue="n"
					validArgs="y,n" message="Publish (Git repository, SourceForge)" />
			</then>
		</if>

		<phingcall target="repository-clone" />

		<typo3convertversion value="${common.major}" type="branch" property="common.branch" />

		<if>
			<not><isset property="common.info.branchName" /></not>
			<then>
				<typo3gitinfo
					branch="${common.branch}"
					type="${common.type}"
					property="common.info"
					gitPath="${project.gitPath}"
					repository="${project.localRepositoryDirectory}" />
			</then>
		</if>

		<!-- Packages are only created if version is lower than 6.2 -->
		<php expression="strnatcmp('${common.major}', '6.2') &gt; -1" returnProperty="common.isPackage" />
		<php expression="strnatcmp('${common.major}', '7.2') &gt; -1" returnProperty="common.usesComposer" />
		<php expression="strnatcmp('${common.major}', '8.0') &lt; 0" returnProperty="common.hasChangeLog" />

		<echo message="isPackage: ${common.isPackage}" />
		<echo message="usesComposer: ${common.usesComposer}" />
		<echo message="hasChangeLog: ${common.hasChangeLog}" />

		<echo message="nextVersion: ${common.info.nextVersion}" />
		<echo message="nextComposerVersion: ${common.info.nextComposerVersion}" />
		<echo message="nextTag: ${common.info.nextTag}" />
		<echo message="currentVersion: ${common.info.currentVersion}" />
		<echo message="currentTag: ${common.info.currentTag}" />
		<echo message="lastReference: ${common.info.lastReference}" />
		<echo message="branchName: ${common.info.branchName}" />
		<echo message="isOutdatedBranch: ${common.info.isOutdatedBranch}" />
		<echo message="successorVersion: ${common.info.successorVersion}" />
	</target>

	<target name="project-md5">
		<typo3filehash dir="${project.targetsDirectory}" returnProperty="project-md5.result" method="md5" />
		<echo message="${project-md5.result}" />
	</target>

	<target name="project-release-file">
		<fail unless="project-release-file.version" message="You must set the $project-release-file.version for this target" />

		<exec logoutput="false" checkreturn="true"
			dir="${project.targetsDirectory}"
			outputProperty="project-release-file.md5"
			command="md5sum *.tar.gz *.zip" />
		<exec logoutput="false" checkreturn="true"
			dir="${project.targetsDirectory}"
			outputProperty="project-release-file.sha256"
			command="shasum -a 256 *.tar.gz *.zip" />

		<copy file="${common.basedir}/Assets/RELEASE.txt" tofile="${project.targetsDirectory}/RELEASE.raw">
			<filterchain>
				<replaceregexp>
					<regexp pattern="##TYPO3_version##" replace="${project-release-file.version}" />
					<regexp pattern="##MD5_checksums##" replace="${project-release-file.md5}" />
					<regexp pattern="##SHA256_checksums##" replace="${project-release-file.sha256}" />
				</replaceregexp>
			</filterchain>
		</copy>

		<exec logoutput="true" checkreturn="true"
			command="gpg --yes --digest-algo SHA256 -u ${git.signingkey} --clearsign --output ${project.targetsDirectory}/RELEASE-${project-release-file.version}.txt ${project.targetsDirectory}/RELEASE.raw" />

		<delete file="${project.targetsDirectory}/RELEASE.raw" />
	</target>

	<target name="project-initialize">
		<delete dir="${project.targetsDirectory}" quiet="true" />
		<mkdir dir="${project.targetsDirectory}" />
	</target>

	<target name="project-permissions">
		<fail unless="project-permissions.directory" message="You must set the $project-permissions.directory for this target" />

		<!-- fix file permissions and make some files executable -->
		<!-- Change ownership -->
		<chown user="root:root" quiet="true" verbose="false">
			<fileset dir="${project-permissions.directory}" />
		</chown>

		<!-- Set readonly permissions for everyone except the owner -->
		<chmod mode="0755" quiet="true" verbose="false">
			<fileset dir="${project-permissions.directory}" />
		</chmod>

		<!-- files should not remain executable -->
		<exec command="find ${project-permissions.directory} -type f | xargs chmod a-x" />

		<!--  ... except those listed in EXEC_FILES -->
		<chmod mode="0755" quiet="true" verbose="false">
			<!-- Files that must be made executable -->
			<fileset dir="${project-permissions.directory}">
				<include name="**/*.phpcron" />
				<include name="**/*.phpsh" />
				<include name="**/*.sh" />
				<include name="**/*.pl" />
			</fileset>
		</chmod>
	</target>

	<target name="repository-export">
		<delete dir="${project.workDirectory}Temporary.git/" quiet="true" />

		<fail unless="repository-export.gitName" message="Property $repository-dump.gitName is required." />
		<fail unless="repository-export.gitNameDefault" message="Property $repository-dump.gitName is required." />
		<fail unless="repository-export.gitRepository" message="Propery $repository-dump.gitRepository is required." />
		<fail unless="repository-export.directory" message="Propery $repository-dump.directory is required." />

		<exec logoutput="false" checkreturn="false"
			outputProperty="repository-export.gitNameFound"
			command="git ls-remote --heads ${repository-export.gitRepository} ${repository-export.gitName}" />

		<if>
			<not><contains string="${repository-export.gitNameFound}" substring="${repository-export.gitName}"/></not>
			<then>
				<echo msg="Branch ${repository-export.gitName} was not found, using ${repository-export.gitNameDefault} instead" />
				<property name="repository-export.gitNameAvailable" value="${repository-export.gitNameDefault}" />
			</then>
			<else>
				<property name="repository-export.gitNameAvailable" value="${repository-export.gitName}" />
			</else>
		</if>

		<exec logoutput="true" checkreturn="true"
			command="git clone -b ${repository-export.gitNameAvailable} ${repository-export.gitRepository} &quot;${project.workDirectory}Temporary.git/&quot;" />
		
		<phingcall target="repository-dump">
			<property name="repository-dump.gitDirectory" value="${project.workDirectory}Temporary.git/" />
			<property name="repository-dump.gitName" value="${repository-export.gitNameAvailable}" />
			<property name="repository-dump.directory" value="${repository-export.directory}" />
		</phingcall>
	</target>

	<target name="repository-dump">
		<fail unless="repository-dump.gitName" message="Property $repository-dump.gitName is required." />
		<fail unless="repository-dump.directory" message="Propery $repository-dump.directory is required." />
		<property name="repository-dump.gitDirectory" value="${project.localRepositoryDirectory}" />

		<delete dir="${repository-dump.directory}" quiet="true" />
		<mkdir dir="${repository-dump.directory}" />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-dump.gitName}" />
			<property name="repository-select.gitDirectory" value="${repository-dump.gitDirectory}" />
		</phingcall>

		<exec logoutput="true" checkreturn="true"
			dir="${repository-dump.gitDirectory}"
			command="git checkout-index -a --prefix=&quot;${repository-dump.directory}&quot;" />

		<phingcall target="composer-install">
			<property name="composer-install.directory" value="${repository-dump.directory}" />
		</phingcall>

		<delete includeemptydirs="true">
			<fileset dir="${repository-dump.directory}" defaultexcludes="false">
				<include name=".editorconfig" />
				<include name=".gitignore" />
				<include name=".gitmodules" />
				<include name=".gitattributes" />
				<include name=".gitreview" />
				<include name="dynamicReturnTypeMeta.json" />
				<include name="Build/" />
				<include name="**/.gitignore" />
				<include name="**/.git/" />
				<include name="**/tests" />
				<include name="**/tests/**" />
				<include name="components/" />
				<include name="vendor/**/Test" />
				<include name="vendor/**/Test/**" />
				<include name="vendor/**/Tests" />
				<include name="vendor/**/Tests/**" />
				<include name="vendor/**/docs" />
				<include name="vendor/**/docs/**" />
				<include name="vendor/**/examples" />
				<include name="vendor/**/examples/**" />
				<include name="vendor/**/example.php" />
				<include name="Packages/Libraries/**/Test" />
				<include name="Packages/Libraries/**/Test/**" />
				<include name="Packages/Libraries/**/Tests" />
				<include name="Packages/Libraries/**/Tests/**" />
				<include name="Packages/Libraries/**/docs" />
				<include name="Packages/Libraries/**/docs/**" />
				<include name="Packages/Libraries/**/examples" />
				<include name="Packages/Libraries/**/examples/**" />
				<include name="Packages/Libraries/**/example.php" />
				<include name=".svn" />
				<include name="**/.svn" />
				<include name="**/.svn/**" />
				<include name="CVS" />
				<include name="SVNreadme.txt" />
				<include name="*.webprj" />
				<include name="*.orig" />
				<include name="*~" />
				<include name=".travis.yml" />
				<include name=".appveyor.yml" />
			</fileset>
		</delete>
	</target>

	<target name="repository-clone">
		<available file="${project.localRepositoryDirectory}.git" type="dir" property="repository-clone.exists" />
		<if>
			<and>
				<isset property="repository-clone.exists" />
				<istrue value="${common.skipClone}" />
			</and>
			<then>
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git clean -df" />

				<if>
					<isset property="common.info.branchName" />
					<then>
						<exec logoutput="true" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							command="git checkout ${common.info.branchName}" />
						<exec logoutput="true" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							command="git reset --hard origin/${common.info.branchName}" />
					</then>
					<else>
						<exec logoutput="true" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							command="git checkout master" />
						<exec logoutput="true" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							command="git reset --hard origin/master" />
					</else>
				</if>

				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git clean -df" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git pull" />
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git fetch --tags" />
				</then>
			<else>
				<delete dir="${project.localRepositoryDirectory}" quiet="true" />
				<mkdir dir="${project.localRepositoryDirectory}" />

				<if>
					<isset property="common.info.branchName" />
					<then>
						<exec logoutput="true" checkreturn="true"
							command="git clone -b ${common.info.branchName} ${git.remoteRepository} &quot;${project.localRepositoryDirectory}&quot;" />
					</then>
					<else>
						<exec logoutput="true" checkreturn="true"
							command="git clone ${git.remoteRepository} &quot;${project.localRepositoryDirectory}&quot;" />
					</else>
				</if>

				<phingcall target="repository-initialize" />
			</else>
		</if>
	</target>

	<target name="composer-install">
		<fail unless="composer-install.directory" message="Property $composer-install.directory is required." />

		<if>
			<istrue value="${common.usesComposer}" />
			<then>
				<exec logoutput="true" checkreturn="true"
					dir="${composer-install.directory}"
					command="composer install --ignore-platform-reqs --no-dev -o" />
			</then>
		</if>
	</target>

	<target name="repository-initialize">
		<!-- Git configuration -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config remote.origin.pushurl '${git.pushUrl}'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config user.name 'TYPO3 Release Team'" />
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config user.email 'typo3cms@typo3.org'" />

		<!-- Commit Hooks -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="${git.commitHookCommand}" />
	</target>


	<target name="repository-select">
		<fail unless="repository-select.branch" message="Property $repository-select.branch is required." />
		<property name="repository-select.gitDirectory" value="${project.localRepositoryDirectory}" />
		<property name="repository-select.resetHard" value="false" />

		<gitcheckout
			gitPath="${project.gitPath}"
			repository="${repository-select.gitDirectory}"
			branchname="${repository-select.branch}" />

		<if>
			<istrue value="${repository-select.resetHard}" />
			<then>
				<exec logoutput="true" checkreturn="true"
					dir="${repository-select.gitDirectory}"
					command="git reset --hard origin/${repository-select.branch}" />
			</then>
		</if>
	</target>

	<!-- this target does a "git tag" command for the main repository -->
	<target name="repository-typo3-tag">
		<!-- only tag if the appropriate variables are set -->
		<fail unless="repository-typo3-tag.tag" message="Property $repository-typo3-tag.tag is required." />
		<fail unless="repository-typo3-tag.branch" message="Property $repository-typo3-tag.branch is required." />
		<fail unless="repository-typo3-tag.version" message="Property $repository-typo3-tag.version is required." />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-tag.branch}" />
		</phingcall>

		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git config user.signingkey '${git.signingkey}'" />

		<!-- tagging the main project -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="git tag -s -f -m 'Tagged version ${repository-typo3-tag.version}' ${repository-typo3-tag.tag}" />

		<!-- publish the tags to the remote repository, if the option was set -->
		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<!-- push tag for super project (Core) -->
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git push origin ${repository-typo3-tag.tag}" />
			</then>
		</if>
	</target>

	<target name="repository-typo3-push">
		<fail unless="repository-typo3-push.branch" message="Property $repository-typo3-push.branch is required" />
		<property name="repository-typo3-push.refresh" value="false" />

		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<exec logoutput="true" checkreturn="true"
					dir="${project.localRepositoryDirectory}"
					command="git push origin HEAD:refs/for/${repository-typo3-push.branch}${git.pushTopic}" />
				<phingcall target="repository-typo3-approve" />

				<if>
					<istrue value="${repository-typo3-push.refresh}" />
					<then>
						<exec logoutput="false" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							outputProperty="repository-typo3-push.expected"
							command="git log -1 --pretty=format:%s" />
						<exec logoutput="false" checkreturn="true"
							dir="${project.localRepositoryDirectory}"
							command="git reset --hard origin/${repository-typo3-push.branch}" />
						<typo3gitrefresh
							repository="${project.localRepositoryDirectory}"
							expected="${repository-typo3-push.expected}" />
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="repository-typo3-approve">
		<if>
			<not><isset property="repository-typo3-approve.commitHash" /></not>
			<then>
				<exec logoutput="false" checkreturn="false"
					dir="${project.localRepositoryDirectory}"
					outputProperty="repository-typo3-approve.commitHash"
					command="git log -1 --pretty=format:%H" />
			</then>
		</if>
		<!-- submit the patch through gerrit after the push -->
		<exec logoutput="true" checkreturn="true"
			dir="${project.localRepositoryDirectory}"
			command="${git.submitApprovalCommand} ${repository-typo3-approve.commitHash}" />
	</target>

	<target name="repository-typo3-version">
		<fail unless="repository-typo3-version.set" message="Property $repository-typo3-version.set is required." />
		<fail unless="repository-typo3-version.branch" message="Property $repository-typo3-version.branch is required." />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-version.branch}" />
		</phingcall>

		<phingcall target="typo3-version">
			<property name="typo3-version.set" value="${repository-typo3-version.set}" />
			<property name="typo3-version.directory" value="${project.localRepositoryDirectory}" />
		</phingcall>
	</target>

	<target name="repository-typo3-changelog">
		<fail unless="repository-typo3-changelog.file" message="Property $repository-typo3-changelog.file is required" />
		<fail unless="repository-typo3-changelog.branch" message="Property $repository-typo3-changelog is required" />

		<phingcall target="repository-select">
			<property name="repository-select.branch" value="${repository-typo3-changelog.branch}" />
		</phingcall>

		<if>
			<isset property="common.info.lastReference" />
			<then>
				<exec logoutput="false" checkreturn="false"
					dir="${project.localRepositoryDirectory}"
					outputProperty="repository-typo3-changelog.raw"
					command="git log refs/tags/${common.info.lastReference}..HEAD --submodule --pretty=format:hash:%h%x09date:%cd%x09subject:%s%x09author:%an%x09body:%b--%x09COMMIT --date=short" />
				<typo3gitchangelog file="${repository-typo3-changelog.file}" property="repository-typo3-changelog.raw"
					format="{{date}}  {{hash}}  {{body.resolves|fixes;NoSpaces,14}}  {{subject}} ({{author}})"
					fieldDelimiter="&#09;" commitDelimiter="--&#09;COMMIT" />
			</then>
			<else>
				<echo message="Since no lastReference is given, no ChangeLog will be generated" />
			</else>
		</if>
	</target>

	<target name="typo3-version">
		<fail unless="typo3-version.set" message="Property $repository-typo3-version.set is required." />
		<fail unless="typo3-version.directory" message="Property $repository-typo3-version.directory is required" />

		<!-- up to TYPO3 4.7 -->
		<phingcall target="typo3-version-set">
			<property name="typo3-version-set.versionFile" value="${typo3-version.directory}t3lib/config_default.php" />
		</phingcall>

		<!-- since TYPO3 6.0 -->
		<phingcall target="typo3-version-set">
			<property name="typo3-version-set.versionFile" value="${typo3-version.directory}typo3/sysext/core/Classes/Core/SystemEnvironmentBuilder.php" />
		</phingcall>
	</target>

	<target name="typo3-version-set">
		<fail unless="typo3-version-set.versionFile" message="Property $typo3-version-set.versionFile is required." />

		<if>
			<available file="${typo3-version-set.versionFile}" />
			<then>
				<move file="${typo3-version-set.versionFile}" tofile="${typo3-version-set.versionFile}.modified">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(\$TYPO_VERSION = )\'[^\']+" replace="$1'${typo3-version.set}" />
							<regexp pattern="(\'TYPO3_version\',\s*)\'[^\']+" replace="$1'${typo3-version.set}" />
						</replaceregexp>
					</filterchain>
				</move>
				<move file="${typo3-version-set.versionFile}.modified" tofile="${typo3-version-set.versionFile}" />
			</then>
		</if>
	</target>

	<target name="typo3-sign-file">
		<fail unless="typo3-sign-file.filePath" message="Property $typo3-sign-file.filePath is required." />

		<exec logoutput="true" checkreturn="true"
			command="gpg --yes --digest-algo SHA256 -u ${git.signingkey} --output ${typo3-sign-file.filePath}.sig --detach-sig ${typo3-sign-file.filePath}" />
	</target>

	<!--
		publishes the existing archives to sourceforge
		watch it: untested, and the folder structure is still unclear
	-->
	<target name="publish-sourceforge" description="Upload existing archives of the TYPO3 source to SourceForce">
		<fail unless="publish-sourceforge.directory" message="Property $publish-sourceforge.name is required." />

		<if>
			<equals arg1="${common.publish}" arg2="y" />
			<then>
				<property name="publish-sourceforge.fullPath" value="/home/frs/project/typo3/TYPO3 Source and Dummy/${publish-sourceforge.directory}" />
				<typo3convertwhitespaces property="publish-sourceforge.fullPath" />
				<echo message="Publishing to ${publish-sourceforge.fullPath}" />

				<!-- the only way to create a folder via ssh, thanks FLOW3 -->
				<typo3exec logoutput="true" retry="5" command="ssh -oBatchMode=yes shell.sourceforge.net create" />
				<typo3exec logoutput="true" retry="5" command="ssh shell.sourceforge.net mkdir -p '${publish-sourceforge.fullPath}'" />
				<typo3exec logoutput="true" retry="5" command="ssh shell.sourceforge.net chmod 0775 '${publish-sourceforge.fullPath}'" />
				<typo3exec logoutput="true" retry="5" command="ssh shell.sourceforge.net shutdown" />
				<typo3exec logoutput="true" retry="5" command="scp ${project.targetsDirectory}* frs.sourceforge.net:'${publish-sourceforge.fullPath}/'" />
			</then>
		</if>
	</target>
</project>
